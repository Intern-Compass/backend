"""add new foreign key rules to relationships

Revision ID: 5b982fc26e62
Revises: db8074ba9d9d
Create Date: 2025-09-08 10:10:06.285374

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '5b982fc26e62'
down_revision: Union[str, Sequence[str], None] = 'db8074ba9d9d'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(op.f('intern_task_task_id_fkey'), 'intern_task', type_='foreignkey')
    op.drop_constraint(op.f('intern_task_intern_id_fkey'), 'intern_task', type_='foreignkey')
    op.create_foreign_key(None, 'intern_task', 'intern', ['intern_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key(None, 'intern_task', 'task', ['task_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.drop_constraint(op.f('milestone_project_id_fkey'), 'milestone', type_='foreignkey')
    op.create_foreign_key(None, 'milestone', 'project', ['project_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.drop_constraint(op.f('note_task_id_fkey'), 'note', type_='foreignkey')
    op.drop_constraint(op.f('note_intern_id_fkey'), 'note', type_='foreignkey')
    op.create_foreign_key(None, 'note', 'task', ['task_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key(None, 'note', 'intern', ['intern_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.drop_constraint(op.f('project_supervisor_id_fkey'), 'project', type_='foreignkey')
    op.drop_constraint(op.f('project_division_id_fkey'), 'project', type_='foreignkey')
    op.create_foreign_key(None, 'project', 'supervisor', ['supervisor_id'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
    op.create_foreign_key(None, 'project', 'division', ['division_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.drop_constraint(op.f('project_intern_project_id_fkey'), 'project_intern', type_='foreignkey')
    op.drop_constraint(op.f('project_intern_intern_id_fkey'), 'project_intern', type_='foreignkey')
    op.create_foreign_key(None, 'project_intern', 'intern', ['intern_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key(None, 'project_intern', 'project', ['project_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.drop_constraint(op.f('project_skill_skill_id_fkey'), 'project_skill', type_='foreignkey')
    op.drop_constraint(op.f('project_skill_project_id_fkey'), 'project_skill', type_='foreignkey')
    op.create_foreign_key(None, 'project_skill', 'project', ['project_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key(None, 'project_skill', 'skill', ['skill_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.drop_constraint(op.f('task_project_id_fkey'), 'task', type_='foreignkey')
    op.create_foreign_key(None, 'task', 'project', ['project_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.drop_constraint(op.f('user_skill_skill_id_fkey'), 'user_skill', type_='foreignkey')
    op.drop_constraint(op.f('user_skill_user_id_fkey'), 'user_skill', type_='foreignkey')
    op.create_foreign_key(None, 'user_skill', 'skill', ['skill_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key(None, 'user_skill', 'user', ['user_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.drop_constraint(op.f('verification_code_user_id_fkey'), 'verification_code', type_='foreignkey')
    op.create_foreign_key(None, 'verification_code', 'user', ['user_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'verification_code', type_='foreignkey')
    op.create_foreign_key(op.f('verification_code_user_id_fkey'), 'verification_code', 'user', ['user_id'], ['id'])
    op.drop_constraint(None, 'user_skill', type_='foreignkey')
    op.drop_constraint(None, 'user_skill', type_='foreignkey')
    op.create_foreign_key(op.f('user_skill_user_id_fkey'), 'user_skill', 'user', ['user_id'], ['id'])
    op.create_foreign_key(op.f('user_skill_skill_id_fkey'), 'user_skill', 'skill', ['skill_id'], ['id'])
    op.drop_constraint(None, 'task', type_='foreignkey')
    op.create_foreign_key(op.f('task_project_id_fkey'), 'task', 'project', ['project_id'], ['id'])
    op.drop_constraint(None, 'project_skill', type_='foreignkey')
    op.drop_constraint(None, 'project_skill', type_='foreignkey')
    op.create_foreign_key(op.f('project_skill_project_id_fkey'), 'project_skill', 'project', ['project_id'], ['id'])
    op.create_foreign_key(op.f('project_skill_skill_id_fkey'), 'project_skill', 'skill', ['skill_id'], ['id'])
    op.drop_constraint(None, 'project_intern', type_='foreignkey')
    op.drop_constraint(None, 'project_intern', type_='foreignkey')
    op.create_foreign_key(op.f('project_intern_intern_id_fkey'), 'project_intern', 'intern', ['intern_id'], ['id'])
    op.create_foreign_key(op.f('project_intern_project_id_fkey'), 'project_intern', 'project', ['project_id'], ['id'])
    op.drop_constraint(None, 'project', type_='foreignkey')
    op.drop_constraint(None, 'project', type_='foreignkey')
    op.create_foreign_key(op.f('project_division_id_fkey'), 'project', 'division', ['division_id'], ['id'])
    op.create_foreign_key(op.f('project_supervisor_id_fkey'), 'project', 'supervisor', ['supervisor_id'], ['id'])
    op.drop_constraint(None, 'note', type_='foreignkey')
    op.drop_constraint(None, 'note', type_='foreignkey')
    op.create_foreign_key(op.f('note_intern_id_fkey'), 'note', 'intern', ['intern_id'], ['id'])
    op.create_foreign_key(op.f('note_task_id_fkey'), 'note', 'task', ['task_id'], ['id'])
    op.drop_constraint(None, 'milestone', type_='foreignkey')
    op.create_foreign_key(op.f('milestone_project_id_fkey'), 'milestone', 'project', ['project_id'], ['id'])
    op.drop_constraint(None, 'intern_task', type_='foreignkey')
    op.drop_constraint(None, 'intern_task', type_='foreignkey')
    op.create_foreign_key(op.f('intern_task_intern_id_fkey'), 'intern_task', 'intern', ['intern_id'], ['id'])
    op.create_foreign_key(op.f('intern_task_task_id_fkey'), 'intern_task', 'task', ['task_id'], ['id'])
    # ### end Alembic commands ###
